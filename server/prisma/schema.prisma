// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AuthProvider {
  LOCAL
  GOOGLE
}

enum DeviceType {
  MOBILE
  DESKTOP
  TABLET
  UNKNOWN
}

enum BrowserType {
  CHROME
  FIREFOX
  SAFARI
  EDGE
  OPERA
  UNKNOWN
}

enum OSType {
  WINDOWS
  MACOS
  LINUX
  ANDROID
  IOS
  UNKNOWN
}

// Models
model User {
  id                         String    @id @default(uuid())
  username                   String?   @unique @db.VarChar(50)
  email                      String    @unique @db.VarChar(255)
  passwordHash               String?   @db.Text
  provider                   AuthProvider @default(LOCAL)
  providerId                 String?   @db.VarChar(100)
  fullName                   String?   @db.VarChar(100)
  profilePictureUrl          String?   @db.Text
  bio                        String?   @db.Text
  isEmailVerified            Boolean   @default(false)
  emailVerificationToken     String?   @db.VarChar(255)
  emailVerificationExpiresAt DateTime?
  isActive                   Boolean   @default(true)
  lastLoginAt                DateTime?
  passwordResetToken         String?   @db.VarChar(255)
  passwordResetExpiresAt     DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relations
  collections   Collection[]
  urls          Url[]
  refreshTokens RefreshToken[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Collection {
  id          String   @id @default(uuid())
  userId      String
  name        String   @db.VarChar(100)
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls Url[]

  @@index([userId])
  @@map("collections")
}

model Url {
  id                 String    @id @default(uuid())
  userId             String
  originalUrl        String    @db.Text
  shortCode          String    @unique @default(cuid()) @db.VarChar(100)
  customPrefix       String?   @db.VarChar(100)
  qrCodeUrl          String?   @db.Text
  name               String?   @db.VarChar(100)
  displayText        String?   @db.Text
  title              String?   @db.VarChar(255)
  description        String?   @db.Text
  collectionId       String?
  clickCount         Int       @default(0)
  lastClickedAt      DateTime?
  expiresAt          DateTime?
  isActive           Boolean   @default(true)
  isPasswordProtected Boolean  @default(false)
  password           String?   @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  clickLogs  ClickLog[]

  @@index([shortCode])
  @@index([userId])
  @@index([collectionId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("urls")
}

model ClickLog {
  id        Int         @id @default(autoincrement())
  urlId     String
  clickedAt DateTime    @default(now())
  ipAddress String?     @db.VarChar(45)
  userAgent String?     @db.Text
  referrer  String?     @db.Text
  country   String?     @db.VarChar(100)
  city      String?     @db.VarChar(100)
  device    DeviceType  @default(UNKNOWN)
  browser   BrowserType @default(UNKNOWN)
  os        OSType      @default(UNKNOWN)

  // Relations
  url Url @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@index([urlId])
  @@index([clickedAt])
  @@map("click_logs")
}

model RefreshToken {
  id               String    @id @default(uuid())
  userId           String
  token            String    @unique @db.VarChar(512)
  expiresAt        DateTime
  createdAt        DateTime  @default(now())
  revokedAt        DateTime?
  replacedByToken  String?   @db.VarChar(512)
  deviceInfo       String?   @db.VarChar(255)
  ipAddress        String?   @db.VarChar(45)
  userAgent        String?   @db.Text

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}