// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AuthProvider {
  LOCAL
  GOOGLE
}

// DeviceType.prisma
enum DeviceType {
  MOBILE
  DESKTOP
  TABLET
  UNKNOWN
}

// BrowserType.prisma
enum BrowserType {
  CHROME
  FIREFOX
  SAFARI
  EDGE
  OPERA
  SAMSUNG_BROWSER
  MOBILE_SAFARI
  INTERNET_EXPLORER
  UC_BROWSER
  UNKNOWN
}

// OSType.prisma
enum OSType {
  WINDOWS
  MACOS
  LINUX
  ANDROID
  IOS
  CHROME_OS
  UNKNOWN
}

// ReferrerType.prisma
enum ReferrerType {
  DIRECT
  SEARCH 
  SOCIAL
  EMAIL
  REFERRAL
  UNKNOWN
}

// SocialPlatform.prisma
enum SocialPlatform {
  FACEBOOK
  TWITTER
  LINKEDIN
  INSTAGRAM
  YOUTUBE
  TIKTOK
  PINTEREST
  SNAPCHAT
  REDDIT
  DISCORD
  TELEGRAM
  WHATSAPP
  UNKNOWN
}

// Models
model User {
  id                         String       @id @default(uuid())
  username                   String?      @unique @db.VarChar(50)
  email                      String       @unique @db.VarChar(255)
  passwordHash               String?      @db.Text
  provider                   AuthProvider @default(LOCAL)
  providerId                 String?      @db.VarChar(100)
  firstName                  String?      @db.VarChar(50)
  lastName                   String?      @db.VarChar(50)
  profilePictureUrl          String?      @db.Text
  bio                        String?      @db.Text
  isEmailVerified            Boolean      @default(false)
  emailVerificationToken     String?      @db.VarChar(255)
  emailVerificationExpiresAt DateTime?
  isActive                   Boolean      @default(true)
  lastLoginAt                DateTime?
  passwordResetToken         String?      @db.VarChar(255)
  passwordResetExpiresAt     DateTime?
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt

  // Relations
  collections   Collection[]
  urls          Url[]
  refreshTokens RefreshToken[]
  customDomains CustomDomain[]

  @@index([email])
  @@index([provider])
  @@index([providerId])
  @@index([isActive])
  @@map("users")
}

model Collection {
  id          String   @id @default(uuid())
  userId      String
  name        String   @db.VarChar(100)
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls Url[] @relation("UrlCollections")

  @@index([userId])
  @@map("collections")
}

model CustomDomain {
  id         String   @id @default(uuid())
  userId     String
  domain     String   @unique
  isVerified Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls Url[]

  // Indexes
  @@index([userId])
  @@index([domain])
  @@map("custom_domains")
}

model Url {
  id                  String   @id @default(uuid())
  userId              String?
  originalUrl         String   @db.Text
  shortCode           String   @unique @db.VarChar(20)
  customAlias         String?  @unique @db.VarChar(50)
  customDomainId      String?
  collectionId        String?
  name                String?  @db.VarChar(255)
  description         String?  @db.Text
  clickCount          Int      @default(0)
  lastClickedAt       DateTime?
  expiresAt           DateTime?
  maxClicks           Int?
  isActive            Boolean  @default(true)
  isPasswordProtected Boolean  @default(false)
  passwordHash        String?  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  customDomain CustomDomain? @relation(fields: [customDomainId], references: [id], onDelete: SetNull)
  collection   Collection?   @relation("UrlCollections", fields: [collectionId], references: [id], onDelete: SetNull)
  clickLogs    ClickLog[]

  // Indexes
  @@index([userId])
  @@index([shortCode])
  @@index([customAlias])
  @@index([collectionId])
  @@index([customDomainId, shortCode])
  @@index([expiresAt])
  @@index([userId, isActive])
  @@map("urls")
}

model ClickLog {
  id        String      @id @default(uuid())
  urlId     String
  clickedAt DateTime    @default(now())
  ipAddress String?     @db.VarChar(45)
  country   String?     @db.VarChar(100)
  city      String?     @db.VarChar(100)
  userAgent String?     @db.Text
  device    DeviceType  @default(UNKNOWN)
  browser   BrowserType @default(UNKNOWN)
  os        OSType      @default(UNKNOWN)
  referrer  String?              @db.Text
  referrerType   ReferrerType    @default(UNKNOWN)
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  socialPlatform SocialPlatform  @default(UNKNOWN)
  fbclid String?
  gclid  String?
  isBot           Boolean?
  isUniqueVisitor Boolean?
  sessionId       String?

  // Relations
  url Url @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@index([urlId])
  @@index([clickedAt])
  @@index([urlId, clickedAt])
  @@map("click_logs")
}

model RefreshToken {
  id                String    @id @default(uuid())
  userId            String
  token             String    @unique @db.VarChar(512)
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  lastUsedAt        DateTime?
  revokedAt         DateTime?
  replacedByToken   String?   @db.VarChar(512)
  ipAddress         String?   @db.VarChar(45)
  userAgent         String?   @db.Text
  deviceInfo        String?   @db.VarChar(255)
  deviceFingerprint String?   @db.VarChar(128)
  isActive          Boolean   @default(true)
  usageCount        Int       @default(0)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([token])
  @@index([userId, isActive, expiresAt])
  @@index([expiresAt])
  @@map("refresh_tokens")
}